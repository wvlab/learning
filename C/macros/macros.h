/* TODO add more examples */
/* TODO explain do { } while(0) macros */
#ifndef WVLAB_MACROS_H
#define WVLAB_MACROS_H

/*
Макросы — не функции и не выделяют запись в стеке, тем самым могут быть более
эффективными, но стоит быть аккуратным и, например, не передавать функцию в них
Это может привести к потере производительности, ведь макрос действует по
правилам define'а
#define a b // в коде a заменится на b
#define macro(a) (a+2) // macro(var) заменится на (var+2), НО! a может быть 
*/


/*
Макросы удобны по причине отсутствия статичкских типов: не придётся писать по 20
функций на каждый тип сравнения! (char, short, int, long, long long, float, double)
*/
#define max(a, b) (a > b ? a : b)
#define min(a, b) (a < b ? a : b)


/*
Variable макрос, принимаемые множественные аргументы идут в __VA_ARGS__,
если убрать ## gcc будет ругаться. (expr1, expr2, expr3...) выполняются
последовательно, но присваивается последнее выражение
> '\' используется для переноса на следующую строку
*/
#define println(format, ...) (printf(format, ##__VA_ARGS__), \
                              printf("\n"))


/*
Также очень удобно создавать функции со стандартными переменными!
Лучший пример — функции из ncurses, такие как: getch, refresh, addch, addstr
и прочие. Они являются макросами, каждая из них подставляет в функцию с
префиксом 'w' (от window) аргумент stdscr
Example:

#define getch()	wgetch(stdscr)
#define move(y,x) wmove(stdscr,(y),(x))
[!NOTE] Взято из ncurses.h

Очень полезно для библиотек, где нужно понятное API!
*/
#endif
